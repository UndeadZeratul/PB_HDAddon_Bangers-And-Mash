class HDFireExtinguisher:HDWeaponGrabber{
	int targettimer;
	int targethealth;
	int targetspawnhealth;
	bool flicked;
	bool washolding;
	default{
		//$Category "Weapons/Hideous Destructor"
		//$Title "burn thingy"
		//$Sprite "CSAWA0"
		+hdweapon.fitsinbackpack
		weapon.selectionorder 300;
		weapon.slotnumber 20;
		weapon.bobstyle "Alpha";
		weapon.bobrangex 0.3;
		weapon.bobrangey 1.4;
		weapon.bobspeed 2.1;
		weapon.kickback 2;
		scale 0.4;
		inventory.pickupmessage "Picked up a fire extinguisher.";
		obituary "%k put out %o's existence.";
		hdweapon.barrelsize 26,1,2;
		hdweapon.refid HDLD_FIREEXTINGUISHER;
		tag "$TAG_EXTINGUISHER";
		+inventory.invbar
		inventory.icon "FXTPA0";
	}
	override bool AddSpareWeapon(actor newowner){return AddSpareWeaponRegular(newowner);}
	override hdweapon GetSpareWeapon(actor newowner,bool reverse){return GetSpareWeaponRegular(newowner,reverse);}

	override string,double getpickupsprite(){return "FXTPA0",0.7;}
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		if(sb.hudlevel == 1){
		sb.drawwepnum(hdw.weaponstatus[1],700);
		}
	}
	override string gethelptext(){
		return
		WEPHELP_FIRE.."  Fire\n"
		..WEPHELP_ALTFIRE.."   Swing\n"
		;
	}
	override double gunmass(){
		return 15+weaponstatus[FIREXS_TANK]<0?0:1;
	}
	override double weaponbulk(){
		return 100+(weaponstatus[FIREXS_TANK]>=0?ENC_FIREEXTINGUISHER:0);
	}
	
	action void HDPunch(double dmg){
		flinetracedata punchline;
		bool punchy=linetrace(
			angle,70,pitch,
			TRF_NOSKY,
			offsetz:height-12,
			data:punchline
		);
		if(!punchy)return;
			doordestroyer.destroydoor(
				self,dmg*1,dmg*0.07,48,height-75,
			angle,pitch);

		//actual puff effect if the shot connects
		LineAttack(angle,70,pitch,punchline.hitline?(countinv("PowerStrength")?random(50,120):random(5,15)):0,"none",
			countinv("PowerStrength")?"WallChunker":"WallChunker",
			flags:LAF_NORANDOMPUFFZ|LAF_OVERRIDEZ,
			offsetz:height-12);
			
		LineAttack(angle,70,pitch,punchline.hitline?(countinv("PowerStrength")?random(50,120):random(5,15)):0,"none",
			countinv("PowerStrength")?"HDSmokeChunk":"BulletPuffSmall",
			flags:LAF_NORANDOMPUFFZ|LAF_OVERRIDEZ,
			offsetz:height-12);
		
		LineAttack(angle,70,pitch,punchline.hitline?(countinv("PowerStrength")?random(50,120):random(5,15)):0,"none",
			countinv("PowerStrength")?"HDAxePuff":"HDAxePuff",
			flags:LAF_NORANDOMPUFFZ|LAF_OVERRIDEZ,
			offsetz:height-12
			
		);
		
		setweaponstate("IGOTEM",5);

		if(!punchline.hitactor){
			HDF.Give(self,"WallChunkAmmo",1);
			return;
		}
		actor punchee=punchline.hitactor;

		//charge!
		if(invoker.flicked)dmg*=1.5;
		else dmg+=HDMath.TowardsEachOther(self,punchee)*2;

		//come in swinging
		let onr=hdplayerpawn(self);
		if(onr){
			int iy=max(abs(player.cmd.pitch),abs(player.cmd.yaw));
			if(iy>0)iy*=100;
			else if(iy<0)iy*=200;
			dmg+=min(abs(iy),dmg*2);

			//need to be well grounded
			if(floorz<pos.z)dmg*=0.5;
		}

		//shit happens
		dmg*=frandom(1.00,1.15);


		//other effects
		if(
			onr
			&&!punchee.bdontthrust
			&&(
				punchee.mass<200
				||(
					punchee.radius*2<punchee.height
					&& punchline.hitlocation.z>punchee.pos.z+punchee.height*0.6
				)
			)
		){
			double iyaw=player.cmd.yaw*(65535./360.);
			if(abs(iyaw)>(0.5)){
				punchee.A_SetAngle(punchee.angle-iyaw*100,SPF_INTERPOLATE);
			}
			double ipitch=player.cmd.pitch*(65535./360.);
			if(abs(ipitch)>(0.5*65535/360)){
				punchee.A_SetPitch(punchee.angle+ipitch*100,SPF_INTERPOLATE);
			}
		}
		//headshot lol
		if(
			!punchee.bnopain
			&&punchee.health>0
			&&!(punchee is "HDBarrel")
			&&punchline.hitlocation.z>punchee.pos.z+punchee.height*0.75
		){
			if(hd_debug)A_Log("HEAD SHOT");
			punchee.InStateSequence(curstate,resolvestate("falldown"));
			dmg*=frandom(1.2,1.7);
		}else{punchee.InStateSequence(curstate,resolvestate("falldown"));}

		if(hd_debug){
			string pch="";
			if(punchee.player)pch=punchee.player.getusername();
				else pch=punchee.getclassname();
			A_Log(string.format("Hit %s for %i damage!",pch,dmg));
		}
		
		
		//hit sound
		if(punchee.bnoblood)
		{
		if(dmg*2>punchee.health)punchee.A_StartSound("weapons/axewall",CHAN_BODY,volume:1.25);
		}
		else 
		{
		punchee.A_StartSound("weapons/axeflesh",CHAN_BODY,0,0.5);
		if(dmg*2>punchee.health)punchee.A_StartSound("weapons/axeflesh",CHAN_7,0,1);
		if(dmg*2>punchee.health)punchee.A_StartSound("weapons/axesplat",CHAN_6,0,1);
		}
		
		hdmobbase.forcepain(punchee);
		punchee.InStateSequence(curstate,resolvestate("falldown"));
		//punchee.InStateSequence(curstate,resolvestate("falldown"));
		
		if(punchee.health>0)punchee.damagemobj(self,self,int(dmg),"SmallArms3");
		//else HDF.Give(punchee,"SawGib",dmg*0.2);
		
		LineAttack(angle,70,pitch,punchline.hitline?(countinv("PowerStrength")?random(50,120):random(5,15)):0,"none",
			countinv("PowerStrength")?"HDAxePuff":"HDAxePuff",
			flags:LAF_NORANDOMPUFFZ|LAF_OVERRIDEZ,
			offsetz:height-12);

		if(!punchee)invoker.targethealth=0;else{
			invoker.targethealth=punchee.health;
			invoker.targetspawnhealth=punchee.spawnhealth();
			invoker.targettimer=0;
		}
	}
	
	
	
	
		action void A_HDFireExtinguish(double nitrovel = 20){
		A_WeaponReady(WRF_NONE);
		invoker.weaponstatus[FIREXS_TANK]--;
			A_MuzzleClimb(
				randompick(-1,1)*frandom(0.2,0.3),
				randompick(-1,1)*frandom(0.2,0.4));
		
		vector3 gpos=pos+gunpos((11,0,-getdefaultbytype("HDFireExtinguisher_Projectile").height*0.6));
		let ggg=HDFireExtinguisher_Projectile(spawn("HDFireExtinguisher_Projectile",gpos,ALLOW_REPLACE));

		let hdp=hdplayerpawn(self);
		
		ggg.angle=hdp.gunangle;
		ggg.pitch=hdp.gunpitch;
		ggg.target=self;
		
		ggg.angle=angle+frandom(-15,15);

		ggg.vel=vel+(cos(hdp.gunpitch)*(cos(hdp.gunangle),sin(hdp.gunangle)),-sin(hdp.gunpitch))*nitrovel;
		
		}
		
		action void A_SmokeEmit(double smokevel = 23){
		vector3 gpos=pos+gunpos((11,0,-getdefaultbytype("HDFireExtinguisherNitro").height*0.6));
		let ggg=HDFireExtinguisherNitro(spawn("HDFireExtinguisherNitro",gpos,ALLOW_REPLACE));

		let hdp=hdplayerpawn(self);
		
		ggg.angle=hdp.gunangle+frandom(-15,15);
		ggg.pitch=hdp.gunpitch;
		
		//ggg.angle=angle+frandom(-15,15);

		ggg.vel=vel+(cos(hdp.gunpitch)*(cos(hdp.gunangle),sin(hdp.gunangle)),-sin(hdp.gunpitch))*smokevel;
		}

	states{
	ready:
		FXTG A 1{
			A_WeaponReady(WRF_ALLOWRELOAD|WRF_ALLOWUSER3|WRF_ALLOWUSER4);
		}goto readyend;
		
	select0:
		FXTG A 0;
		goto select0big;
	deselect0:
		FXTG A 0;
		goto deselect0big;
	hold:
		FXTG A 0 A_JumpIf(invoker.weaponstatus[FIREXS_TANK]>4,"saw");
		goto nope;
	fire:
		FXTG A 2;
		FXTG B 4 A_JumpIf(invoker.weaponstatus[FIREXS_TANK]>4,"saw");
		goto nope;
	saw:
		FXTG B 1 
		{A_HDFireExtinguish();A_SmokeEmit();
		A_StartSound("pb/tools/fireext/shoot",CHAN_7,CHANF_OVERLAP);}
		FXTG B 0 A_Refire();
		goto readyend;

	altfire:
	startfire:
		#### A 0 A_JumpIfInventory("PowerStrength",1,"zerkswingstart");
		FXTG A 0 A_StartSound("weapons/pocket",CHAN_6);
		FXTG CD 3;
		FXTG EF 2;
		TNT1 A 4 offset(0,32);
		goto holdswing;
	zerkswingstart:
		FXTG A 0 A_StartSound("weapons/pocket",CHAN_6);
		FXTG CD 1;
		FXTG EF 1;
		goto holdswing;
	holdswing:
		TNT1 A 1 A_WeaponBusy();
		#### A 0 A_JumpIf(pressingreload(),"recoverswing");
		#### A 0 A_JumpIf(pressingfire(),"holdswing");
		TNT1 A 0 A_ReFire("holdswing");
	goto swing;
	swingreturn:
		TNT1 A 7;
		TNT1 A 5 A_StartSound("weapons/pocket",CHAN_6);
	goto holdswing;
	swing:
		#### A 0 A_JumpIfInventory("PowerStrength",1,"zerkswing");
		FXT2 A 0 A_StartSound("weapons/axeswing",CHAN_7);
		FXT2 ABC 1;
		#### D 0 A_Overlay(5,"hitcheck",false);
		#### DEFGH 1;
		//#### A 0 A_JumpIf(pressingaltfire(),"altfire");
		TNT1 A 6;
		#### A 0 A_JumpIf(pressingfire(),"swingreturn");
		#### A 0 A_JumpIf(pressingaltfire(),"lungealt");
		TNT1 A 0 A_ReFire("holdswing");
		FXTG A 0 A_WeaponBusy;
		goto recoverswing;
		
	zerkswing:
		FXT2 A 0 A_StartSound("weapons/axeswing",CHAN_7);
		FXT2 ABC 1;
		#### D 0 A_Overlay(5,"hitcheckzerk",false);
		#### DEFGH 1;
		//#### A 0 A_JumpIf(pressingaltfire(),"altfire");
		TNT1 A 12;
		#### A 0 A_JumpIf(pressingfire(),"swingreturn");
		#### A 0 A_JumpIf(pressingaltfire(),"lungealt");
		TNT1 A 0 A_ReFire("holdswing");
		FXTG A 0 A_WeaponBusy;
		goto recoverswing;

	recoverswing:
		FXTG A 2 offset(10,84);
		FXTG A 2 offset(9,72);
		FXTG A 2 offset(8,60);
		FXTG A 1 offset(7,52);
		FXTG A 1 offset(5,42);
		FXTG A 1 offset(3,38);
		FXTG A 1 offset(3,35);
		#### A 0 A_JumpIf(pressingfire(),"nope");
		goto readyend;
		
	hitcheck:
		TNT1 A 1 HDPunch(45);
		TNT1 A 1 HDPunch(35);
		TNT1 A 1 HDPunch(30);
	stop;
	
	hitcheckzerk:
		TNT1 AAA 1 HDPunch(invoker.flicked?300:250);
	stop;
	
	IGOTEM:TNT1 A 1;stop;

	spawn:
		FXTP A -1;
		stop;
	}
	override void initializewepstats(bool idfa){
		weaponstatus[FIREXS_TANK]=700;
	}
}

enum fireextinguisherstatus{
	FIREXF_JUSTUNLOAD=1,

	FIREXS_FLAGS=0,
	FIREXS_TANK=1,
};

class HDFireExtinguisherNitro:HDSmoke{
	default{
		scale 0.3;gravity 0.01;alpha 0.75;
		hdpuff.fadeafter 12;
		hdpuff.decel 0.96;
		hdpuff.fade 0.91;
		hdpuff.grow 0.1;
		hdpuff.minalpha 0.001;
		hdpuff.startvelz 2.;
		radius 3; height 3;
		+rollsprite
	}
	override void postbeginplay()
		{A_SetRoll(roll+frandom(0,360));hdactor.postbeginplay();}
	states{
	spawn:
		WPS0 ABCD 0{frame=random(0,3);}
		WPS0 ### 1 A_SetScale(scale.y*1.01);
		WPS0 ## 1 A_SetScale(scale.y*1.005);
		WPS0 # 1 A_SetScale(scale.y*1.0025);
		WPS0 # -1;
		wait;
	}
}

class HDFireExtinguisher_Projectile:HDFireball{
	
	default{
		//missiletype "HDImpBallTail";
		speed 35;
		damage 0;
		scale 0.2;
		gravity 0;
		+FORCEPAIN
		seesound "pb/fuck";
		deathsound "pb/fuck";
		activesound "pb/fuck";
	}
	double initangleto;
	double inittangle;
	double inittz;
	vector3 initpos;
	void A_ImpSquirt(){
		roll=frandom(0,360);alpha*=0.96;scale*=frandom(1.,0.96);
		if(!tracer)return;
		double diff=max(
			absangle(initangleto,angleto(tracer)),
			absangle(inittangle,tracer.angle),
			abs(inittz-tracer.pos.z)*0.05
		);

		//do it again
		initangleto=angleto(tracer);
		inittangle=tracer.angle;
		inittz=tracer.pos.z;
		}
/*	override void tick(){
	scalex+=0.15;
	scaley+=0.15;
	super.tick();
	}*/

	states{
	spawn:
	
		BAL1 FFF 1
		{
		scale.x+=0.01;
		scale.y+=0.01;
		
        if(!blockingmobj)return; //dastrukar's fix
            switch(blockingmobj.GetClassName()){

                case 'HDImpBall':
                    blockingmobj.die(blockingmobj, blockingmobj);
                    break;
				}
		
		}
		BAL1 FFFFFFFGGGGGGGGG 1
		{
		scale.x+=0.01;
		scale.y+=0.01;
		
		A_RadiusGive("HDFireEnder",110,RGF_PLAYERS|RGF_GIVESELF|RGF_MONSTERS|RGF_OBJECTS|RGF_VOODOO|RGF_CORPSES|RGF_KILLED,5);
		A_RadiusGive("HDFireDouse",110,RGF_PLAYERS|RGF_GIVESELF|RGF_MONSTERS|RGF_OBJECTS|RGF_VOODOO|RGF_CORPSES|RGF_KILLED,20);
		
        if(!blockingmobj)return; //dastrukar's fix
            switch(blockingmobj.GetClassName()){

                case 'HDImpBall':
                    blockingmobj.die(blockingmobj, blockingmobj);
                    break;
				}
		
				For(let ccc = BlockThingsIterator.Create(self,256); ccc.Next();){
					If(!ccc.thing||Distance3D(ccc.thing)>256||!ccc.thing.CheckSight(self)){Continue;}
					
					//this shit has caused me a headache
					//thank you renegade4339 for solving this issue
					let plr = HDPlayerPawn(ccc.thing);
					let mob = HDMobBase(ccc.thing);
					
					If(ccc.thing is "HDImpBall")
					{
						target=ccc.thing;
						ccc.thing.die(ccc.thing, ccc.thing);
					}
					
					Else If(ccc.thing is "HDPlayerPawn")
					{
						target=plr;
						plr.stunned+=4;
					}
				
				}
		
		
		}
		stop;
	death:
		//RGF_PLAYERS|RGF_GIVESELF|RGF_MONSTERS|RGF_OBJECTS|RGF_VOODOO|RGF_CORPSES|RGF_KILLED
		
		
		//TNT1 A 0 A_RadiusGive("ImmunityToFire",25,RGF_PLAYERS|RGF_GIVESELF|RGF_MONSTERS|RGF_OBJECTS|RGF_VOODOO|RGF_CORPSES|RGF_KILLED,1);
				TNT1 A 0{
			A_RadiusGive("HDFireEnder",220,RGF_PLAYERS|RGF_GIVESELF|RGF_MONSTERS|RGF_OBJECTS|RGF_VOODOO|RGF_CORPSES|RGF_KILLED,5);
			A_RadiusGive("HDFireDouse",220,RGF_PLAYERS|RGF_GIVESELF|RGF_MONSTERS|RGF_OBJECTS|RGF_VOODOO|RGF_CORPSES|RGF_KILLED,20);
			
			//spawn("HDFireExtinguisherNitro",pos,ALLOW_REPLACE);
			A_Scream();
			tracer=null;
            if(!blockingmobj)return; //also dastrukar's fix
            switch(blockingmobj.GetClassName()){
                case 'Necromancer':
                case 'Hatchling':
                case 'FlyingSkull':
                case 'Putto':
                    blockingmobj.damagemobj(self,target,1000,"Bashing");
                    break;

                case 'HDImpBall':
                    blockingmobj.die(blockingmobj, blockingmobj);
                    break;
				}
				
				For(let ccc = BlockThingsIterator.Create(self,256); ccc.Next();){
					If(!ccc.thing||Distance3D(ccc.thing)>256||!ccc.thing.CheckSight(self)){Continue;}
					
					//this shit has caused me a headache
					//thank you renegade4339 for solving this issue
					let plr = HDPlayerPawn(ccc.thing);
					let mob = HDMobBase(ccc.thing);
					
					//If(ccc.thing.bISMONSTER&&ccc.thing.health>0)
					If(ccc.thing.health>0)
					{
						let mob = HDMobBase(ccc.thing);
						
						If(ccc.thing is "HDMobBase")
						{
							target=mob;
							mob.stunned+=16;	
						}
						
						If(ccc.thing is "HDImpBall")
						{
							target=mob;
							ccc.thing.die(ccc.thing, ccc.thing);
						}
						
					}
					
					Else If(ccc.thing is "HDPlayerPawn")
					{
						target=plr;
						plr.stunned+=8;
					}
				
				}
				
				
			}
		BAL1 FFGGZZZZZZZZZZZZZZZ 1
		{
			A_RadiusGive("HDFireEnder",220,RGF_PLAYERS|RGF_GIVESELF|RGF_MONSTERS|RGF_OBJECTS|RGF_VOODOO|RGF_CORPSES|RGF_KILLED,5);
			A_RadiusGive("HDFireDouse",220,RGF_PLAYERS|RGF_GIVESELF|RGF_MONSTERS|RGF_OBJECTS|RGF_VOODOO|RGF_CORPSES|RGF_KILLED,20);
		}
		stop;
	}
}