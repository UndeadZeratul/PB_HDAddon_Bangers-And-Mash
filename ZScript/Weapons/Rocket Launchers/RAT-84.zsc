class HDAT4_WEP:HDWeapon{
	default{
		//$Category "Weapons/Hideous Destructor"
		//$Title "RAT-84"
		//$Sprite "AT4PA0"

		//+weapon.wimpy_weapon
		//+hdweapon.reverseguninertia
		weapon.selectionorder 2;
		weapon.slotnumber 5;
		weapon.kickback 30;
		weapon.bobrangex 0.21;
		weapon.bobrangey 0.86;
		+hdweapon.fitsinbackpack
		scale 0.6;
		inventory.pickupmessage "$PICKUP_AT4";
		obituary "%o's remains can no longer be identified thanks to %k's green tube.";
		hdweapon.barrelsize 32,3.1,2;
		tag "$TAG_AT4";
		hdweapon.refid HDLD_AT4;
	}
	override string pickupmessage(){
		if(weaponstatus[1]&AT4S_CHAMBER)return string.format("%s. It is used.",super.pickupmessage());
		else return string.format("%s! It has a round.",super.pickupmessage());
		return super.pickupmessage();
	}
	
	override bool AddSpareWeapon(actor newowner){return AddSpareWeaponRegular(newowner);}
	override hdweapon GetSpareWeapon(actor newowner,bool reverse,bool doselect){return GetSpareWeaponRegular(newowner,reverse,doselect);}
	override void tick(){
		super.tick();
		drainheat(AT4S_HEAT,6);
	}
	override void postbeginplay(){
		super.postbeginplay();
		}
	override double gunmass(){
		double amt=weaponstatus[AT4S_CHAMBER];
		return 12+amt;
	}
	override double weaponbulk(){
		int rkt=weaponstatus[AT4S_DEPLOYED];
		if(rkt<=0)return 65;
		else return 85;
	}
	override string,double getpickupsprite(){return "M72PA0",0.7;}
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		if(sb.hudlevel==1){
			//sb.drawnum(hpl.countinv("HDAT4_WEP"),-45,-8,sb.DI_SCREEN_CENTER_BOTTOM,font.CR_BLACK);
		}
		if(hdw.weaponstatus[AT4S_CHAMBER]>1)
		{
			sb.drawrect(-22,-15,3,2);
			sb.drawrect(-18,-15,2,2);
			sb.drawrect(-26,-17,4,6);
			sb.drawrect(-30,-16,4,4);
		}
		else
		{
			sb.drawrect(-18,-15,2,2);
		}
	}
	
	action void A_FireAT4(){
		A_StartSound("weapons/grenadeshot",CHAN_WEAPON);
		vector3 gpos=pos+gunpos((0,0,-getdefaultbytype("hdheat_at4").height*0.6));
		let ggg=hdheat_at4(spawn("hdheat_at4",gpos,ALLOW_REPLACE));

		let hdp=hdplayerpawn(self);
		if(hdp){
			ggg.angle=hdp.gunangle;
			ggg.pitch=hdp.gunpitch-2;
		}else{
			ggg.angle=angle;
			ggg.pitch=pitch-2;
		}
		ggg.angle=angle;ggg.pitch=pitch-0;ggg.target=self;ggg.master=self;
		ggg.primed=true;
	}
	
	action void A_HDBackBlast()
	{
		let hdp=hdplayerpawn(self);
		double shootangle = hdp.angle-180;
		
		vector3 gpos=pos+gunpos((0,0,-getdefaultbytype("HD_Backblast").height*0.6));

        let blst=actor(spawn("HD_Backblast",gpos,
            ALLOW_REPLACE)
        );
        blst.angle=shootangle;
        blst.pitch=pitch-180;
        blst.target=self;
        blst.master=self;
        blst.vel.xy = (cos(shootangle) * 60, sin(shootangle) * 60);
        blst.vel.z=-sin(pitch)*-60;
	}
	
		override void DrawSightPicture(
		HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl,
		bool sightbob,vector2 bob,double fov,bool scopeview,actor hpc,string whichdot
	){
		int cx,cy,cw,ch;
		[cx,cy,cw,ch]=screen.GetClipRect();
		sb.SetClipRect(
			-16+bob.x,-4+bob.y,32,16,
			sb.DI_SCREEN_CENTER
		);
		vector2 bobb=bob*1.1;
		sb.drawimage(
			"AT4_ST02",(16,20)+bobb,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER,
			alpha:0.9
		);
		sb.SetClipRect(cx,cy,cw,ch);
		sb.drawimage(
			"AT4_ST01",(0,-5)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER
		);
	}
	
	override string gethelptext(){
		return
		WEPHELP_FIRESHOOT
		..WEPHELP_UNLOAD.."   Throw\n"
		;
	}
	
	states{
	select0:
		AT4G A 0;
		AT4G A 0 
		{
			if(invoker.weaponstatus[AT4S_DEPLOYED]>0||invoker.weaponstatus[AT4S_CHAMBER]<2)
			{setweaponstate("select0big");}
		}
		goto select0bfg;
	deselect0:
		AT4G A 0;
		AT4G A 0 
		{
			if(invoker.weaponstatus[AT4S_CHAMBER]<2)
			{setweaponstate("deselect0big");}
			else invoker.weaponstatus[AT4S_DEPLOYED]=0;
		}
		goto deselect0bfg;
	ready:
		AT4G A 1 
		{
			A_WeaponReady(WRF_ALL);
			invoker.weaponstatus[AT4S_DEPLOYED]=1;
		}
		goto readyend;
	fire:
		AT4G A 1 offset(0,34){
			if(invoker.weaponstatus[AT4S_CHAMBER]<2){
				setweaponstate("nope");
				return;
			}
			A_FireAT4();
			A_HDBackBlast();
			A_GunFlash();
			A_StartSound("weapons/AT4fire",CHAN_WEAPON);
			A_StartSound("weapons/rockignite",CHAN_AUTO);
			A_StartSound("weapons/rockboom",5);
			invoker.weaponstatus[AT4S_CHAMBER]--;
			invoker.weaponstatus[AT4S_HEAT]+=86;
		}
		AT4G B 2 A_MuzzleClimb(-frandom(0.9,1.),-frandom(1.3,1.6),frandom(0.5,0.6),frandom(0.6,0.8));
		AT4G A 5;
		goto nope;
	flash:
		TNT1 A 1 bright{
			HDFlashAlpha(0,true);
			A_Light1();
		}
		TNT1 A 2{
			A_ZoomRecoil(0.5);
			A_Light0();
		}
		stop;
	unload:
	---- A 0 A_JumpIfInventory("HDIncapWeapon",1,"Incapped");
	YEET:
		---- A 1
		{
		if(player&&hdweapon(player.readyweapon)){
		 player.cmd.buttons|=BT_ZOOM;
		 DropInventory(player.readyweapon);
		}
		}
		TNT1 A 0;
	spawn:
		M72P ABC -1 nodelay{
			if(invoker.weaponstatus[AT4S_CHAMBER]<2)frame=1;
			else if(invoker.weaponstatus[AT4S_DEPLOYED]<=0)frame=2;
		}
	}
	override void InitializeWepStats(bool idfa){
		weaponstatus[AT4S_CHAMBER]=2;
		if(!idfa){
			weaponstatus[0]=0;
			weaponstatus[AT4S_HEAT]=0;
		}
	}
}
enum AT4status{
	AT4F_JUSTUNLOAD=1,

	AT4S_STATUS=0,
	AT4S_CHAMBER=1,
	AT4S_DEPLOYED=2,
	AT4S_HEAT=3,
};

class HDHEAT_AT4:RocketGrenade{
	default{
		+forcepain
		scale 0.37; woundhealth 1800;
		decal "BrontoScorch";
	}
	override void ExplodeSlowMissile(line blockingline,actor blockingobject){
		if(max(abs(skypos.x),abs(skypos.y))>=32768){destroy();return;}
		bmissile=false;
		//bounce
		//nothing here - HEAT will always explode

		//explosion
		if(inthesky){
			distantnoise.make(self,"world/rocketfar");
			let aaa=spawn("IdleDummy",pos);
			if(!!aaa){
				aaa.stamina=30;
				aaa.setz(clamp(aaa.pos.z,aaa.floorz,aaa.ceilingz));
				aaa.A_StartSound("world/explode",CHAN_BODY,CHANF_OVERLAP);
			}
		}else{
			actor xpl=spawn("Gyrosploder",self.pos-(0,0,1),ALLOW_REPLACE);
			xpl.target=target;xpl.master=master;xpl.stamina=stamina;
			actor aaa=Spawn("WallChunker",pos,ALLOW_REPLACE);
			xpl=spawn("HDExplosion",pos,ALLOW_REPLACE);aaa.vel.z=2;
			xpl=spawn("HDExplosion_Long",pos,ALLOW_REPLACE);aaa.vel.z=0;
			aaa=spawn("HDExplosion",pos,ALLOW_REPLACE);aaa.vel.z=2;
			aaa=spawn("HDExplosion_Long",pos,ALLOW_REPLACE);aaa.vel.z=0;
			aaa.scale.x=1.5;
			aaa.scale.y=1.5;

			//damage
			HEATShot(self,192);

			A_SprayDecal("BrontoScorch",16);
		}
		A_HDBlast(
			pushradius:328,pushamount:128,fullpushradius:96,
			fragradius:HDCONST_ONEMETRE*(10+0.2*stamina),fragtype:"HDB_fragRL",
			immolateradius:128,immolateamount:random(3,60),
			immolatechance:isrocket?random(1,stamina):25
		);
		A_SpawnChunksFrags("HDB_fragRL",180);
		destroy();return;
	}
	states{
	spawn:
		MISL A 3 nodelay{
			primed=true;
			if(Wads.CheckNumForName("id",0)!=-1){scale.x=0.24;scale.y=0.24;}
		}
		goto spawn1;
	}
	static void HEATShot(actor caller,double squirtamt){
		vector3 originalpos=caller.pos;

		//do a series of linetracers to drill through everything
		caller.A_SprayDecal("BigScorch",squirtamt);
		array<actor>hitactors;hitactors.clear();
		flinetracedata sqtrace;
		do{
			caller.linetrace(
				caller.angle,
				squirtamt,
				caller.pitch,
				data:sqtrace
			);

			caller.setorigin(sqtrace.hitlocation-sqtrace.hitdir,false);
			if(sqtrace.hitactor){
				int dmgg=int(frandom(70,240+squirtamt));
				int dangle=int(absangle(caller.angle,caller.angleto(sqtrace.hitactor)));
				bool crapshot=dangle>40;
				if(dangle<20){
					dmgg+=int((180-dangle)*squirtamt*frandom(0.4,0.45));
					if(hd_debug)console.printf("CRIT!");
				}else if(!crapshot)dmgg+=int(frandom(100,400-dangle+squirtamt*2));
				int originalhealth=sqtrace.hitactor.health;
				sqtrace.hitactor.damagemobj(
					caller,caller.target,dmgg,crapshot?"Slashing":"Piercing",
					crapshot?0:DMG_NO_ARMOR
				);
				int fdmg=0;
				if(sqtrace.hitactor){
					fdmg=originalhealth-sqtrace.hitactor.health;
					if(
						sqtrace.hitactor.health>0
						&&(fdmg<<3)<sqtrace.hitactor.spawnhealth()
					)break;
					else{
						hitactors.push(sqtrace.hitactor);
						sqtrace.hitactor.bnonshootable=true;
					}
				}
				squirtamt-=max(8,fdmg>>6);
			}else{
				doordestroyer.destroydoor(caller,maxwidth:squirtamt*frandom(1.3,1.6),dedicated:true);
				squirtamt-=max(16,sqtrace.distance);
			}
		}while(squirtamt>0);
		for(int i=0;i<hitactors.size();i++){
			if(hitactors[i])hitactors[i].bnonshootable=false;
		}
		vector3 finalpos=caller.pos;
		caller.setorigin(originalpos,false);

		if(finalpos!=originalpos){
			int iii=int((finalpos-originalpos).length());
			vector3 trailpos=(0,0,0);
			vector3 vu=caller.vel.unit();
			vector3 vu2=vu*4;
			for(int i=0;i<iii;i++){
				trailpos+=vu;
				caller.A_SpawnParticle(
					"white",
					SPF_FULLBRIGHT,
					5,
					frandom(0.04,0.07)*(iii-i*0.5),
					caller.angle,
					trailpos.x+frandom(-12,12),trailpos.y+frandom(-12,12),trailpos.z+frandom(-12,12),
					vu2.x,vu2.y,vu2.z,
					0,0,0.6,
					sizestep:4
				);
			}
		}
	}
	
	states{
	spawn:
		ROCQ A 3;
	spawnrocket:
		#### A 2{
			{  
				if(!inthesky){
					brockettrail=true;
					actor sss=spawn("HDGunsmoke",pos,ALLOW_REPLACE);
					A_StartSound("weapons/rocklaunch",5);
					sss.vel=vel*0.1;
				}
				A_ChangeVelocity(
					cos(pitch)*60,0,
					sin(-pitch)*60,CVF_RELATIVE
				);
				stamina--;
			}
		}
		wait;
	death:
		TNT1 A 1;
		stop;
	}
}



class HDExplosion_Long:IdleDummy{
	default{
		+forcexybillboard +bright
		alpha 1.1;renderstyle "add";
	}
	states{
	spawn:
	death:
		MISL B 0 nodelay{
			if(max(abs(pos.x),abs(pos.y),abs(pos.z))>=32768){destroy();return;}
			vel.z+=4;
			A_StartSound("world/explode");
			let xxx=spawn("HDExplosionLight",pos);
			xxx.target=self;
		}
		MISL BB 0 A_SpawnItemEx("ParticleWhiteSmall", 0,0,0, vel.x+random(-2,2),vel.y+random(-2,2),vel.z,0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS);
		MISL BBBB 0 A_SpawnItemEx("HDSmoke", 0,0,0, vel.x+frandom(-2,2),vel.y+frandom(-2,2),vel.z,0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS);
		MISL B 0 A_Jump(256,"fade");
	fade:
		EXP3 ABCDEF 1 A_FadeOut(0.1);
		TNT1 A 20;
		stop;
	}
}

//fuck
class HD_Backblast:manjuice{
	default{
		missiletype "manjuicetrail";
		speed 60;
		scale 0.9;
		seesound "misc/fwoosh";deathsound "misc/fwoosh";
		activesound "misc/fwoosh";
	}
	states{
	spawn:
		MANF A 1 A_StartSound("misc/fwoosh",CHAN_7);
		MANF B 1;
	death:
		MISL B 0{
			vel.z+=1.;
			A_HDBlast(
				64,15,16,"thermal",
				immolateradius:64,random(10,30),32
			);
			//A_SpawnChunks("HDSmokeChunk",random(2,4),6,20);
			scale.x*=1.1;
			scale.y*=1.1;
		}
		MISL CD 1{
		A_HDBlast(
				25,35,16,"thermal",
				immolateradius:5,random(10,30),16
			);
			
			vel.x+=1.5;
			scale.x*=1.1;
			scale.y*=1.1;
		}stop;
	}
}
